{"remainingRequest":"D:\\operate_system\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\operate_system\\src\\components\\SupplierAnalysis.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\operate_system\\src\\components\\SupplierAnalysis.vue","mtime":1543376220537},{"path":"D:\\operate_system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1542166466337},{"path":"D:\\operate_system\\node_modules\\babel-loader\\lib\\index.js","mtime":1542166452696},{"path":"D:\\operate_system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1542166466337},{"path":"D:\\operate_system\\node_modules\\vue-loader\\lib\\index.js","mtime":1542166473519}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport $http from '../common/js/api'\nimport moment from 'moment'\nimport { setOtherLineData } from '../common/js/myCharts'\nimport echarts from 'echarts'\nexport default {\n  data() {\n    return {\n      formInline: {\n        classNames: [],\n        supId: '',\n        supServiceId: ''\n      },\n      supInfoList: [],\n      supServiceList: [],\n      pipeList: [],\n      flag: false,\n      minutesArr: [],\n      timeId: null,\n      m: 0\n    }\n  },\n  methods: {\n    services () {\n      let url = '/operation/upper/querySupInfoList'\n      $http(url, {}, 'get').then((res) => {\n        this.supInfoList = res.resData.supInfos\n        if (this.supInfoList.length) {\n          this.formInline.supId = this.supInfoList[0].supId\n        }\n      })\n    },\n    querySupServiceList () {\n      let url = '/operation/upper/querySupServiceList'\n       $http(url, {}, 'get').then((res) => {\n        this.supServiceList = res.resData.supServiceInfos\n        if (this.supServiceList.length) {\n          this.formInline.supServiceId = this.supServiceList[0].supServiceId\n          // this.queryPipeList(this.formInline.supServiceId)\n        }\n      })\n    },\n    // queryPipeList (param) { // tedstetewtewt\n    //   let url = '/operation/upper/queryPipeList/' + param\n    //   $http(url, {}, 'get').then((res) => {\n    //     this.pipeList = res.resData.simplePipeInfos\n    //     if (this.pipeList.length) {\n    //       this.formInline.classNames[0] = this.pipeList[0].pipeName\n    //     }\n    //   })\n    // },\n    realTime () {\n      let startTime = + new Date('2018-11-20 17:25:36') - 1 * 24 * 3600 * 1000\n      let arr = []\n      for (let i = 0; i <= 1440; i++) {\n        arr.push(moment(startTime + (i * 60 * 1000)).format('YYYYMMDDHHmm'))\n      }\n      this.minutesArr = arr\n      let url = '/qualityanalyze/supplier/realTime'\n      this.formInline.date = moment(+new Date()).format('YYYY-MM-DD HH:mm:ss')\n      $http(url, this.formInline).then((res) => {\n        var myChart = echarts.init(this.$refs.charts)\n        myChart.clear()\n        let dataArr = Object.keys(res.resData.avgCallTime) /* 因为返回是个对象 所以提取对象的key并组成一个数组 这是平均相应时长*/\n        if (dataArr && dataArr.length > 0) {\n          this.flag = true\n          let data = res.resData.avgCallTime\n          let dataCall = res.resData.callNum\n          let xFiled = [] /* x轴数据 */\n          let yFiled = [] /* y平均响应时间y轴数据 */\n          let yCallFiled = [] /* 平均调用量y轴数据 */\n          let handleObj = {}\n          this.minutesArr.forEach(v => {\n            if (data[v]) { /* 检测某个点是否存在 则不动 反之 补一个空  这样写的好处 就是不会改变时间点的顺序 */\n              handleObj[v] = data[v]\n            } else {\n              handleObj[v] = ''\n            }\n          })\n          for (let k in handleObj) {\n            xFiled.push(this.substrTime(k)) /* x轴 */\n            yFiled.push(handleObj[k]) /* y轴 */\n            if (dataCall[k]) {\n              yCallFiled.push(dataCall[k])\n            } else {\n              yCallFiled.push('')\n            }\n          }\n          let lineData = [{\n            \"name\": \"实时响应分析(ms)\",\n            type: 'line',\n            smooth: true, //是否平滑曲线显示\n            lineStyle: { //线条样式 \n              normal: {\n                width: 1,\n                color: 'rgba(44,181,171, 1)'\n              }\n            },\n            areaStyle: { //区域填充样式\n              normal: {\n                //线性渐变，前4个参数分别是x0,y0,x2,y2(范围0~1);相当于图形包围盒中的百分比。如果最后一个参数是‘true’，则该四个值是绝对像素位置。\n                color: 'rgba(44,181,171, 0.3)'\n              }\n            },\n            itemStyle: { //折现拐点标志的样式\n              normal: {\n                color: 'rgba(44,181,171, 1)'\n              }\n            },\n            \"data\": yFiled\n          }, {\n            \"name\": \"实时调用量(条)\",\n            yAxisIndex: 1,\n            type: 'line',\n            smooth: true, //是否平滑曲线显示\n            lineStyle: { //线条样式 \n              normal: {\n                width: 1,\n                color: 'rgb(248,168,159)'\n              }\n            },\n            areaStyle: { //区域填充样式\n              normal: {\n                //线性渐变，前4个参数分别是x0,y0,x2,y2(范围0~1);相当于图形包围盒中的百分比。如果最后一个参数是‘true’，则该四个值是绝对像素位置。\n                color: 'rgb(248,168,159,0.3)'\n              }\n            },\n            itemStyle: { //折现拐点标志的样式\n              normal: {\n                color: 'rgb(248,168,159)'\n              }\n            },\n            \"data\": yCallFiled\n          }]\n          myChart.setOption(setOtherLineData(xFiled, lineData))\n          window.onresize = function () {\n            myChart.resize()\n          }\n        } else {\n          this.flag = false\n        }\n      })\n    },\n    onSubmit () {\n      this.setIntervalFun()\n    },\n    substrTime (params) {\n      return params.substr(params.length - 4).substr(0, 2) + ':' + params.substr(params.length - 4).substr(2, 4)\n    },\n    setIntervalFun () {\n      if (this.timeId) {\n        clearInterval(this.timeId); /* 每次调用定时器 先清除定时器 */\n      }\n      this.realTime() /* 第一次调用 */\n      this.timeId = setInterval(this.playerInterVal, 1000 * 60);\n    },\n    playerInterVal () {\n      this.m++\n      if (this.m > 20) { /* 执行20次以后清除定时器 */\n        this.m= 0\n        this.setIntervalFun() /* 重启定时器 */\n      } else {\n        this.realTime()\n      }\n    },\n    changeValue (value) {\n      // this.queryPipeList(value)\n    }\n  },\n  mounted() {\n    this.services()\n    this.querySupServiceList()\n  }\n}\n",null]}