{"remainingRequest":"D:\\operate_system\\node_modules\\babel-loader\\lib\\index.js!D:\\operate_system\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\operate_system\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\operate_system\\src\\components\\SupplierAnalysis.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\operate_system\\src\\components\\SupplierAnalysis.vue","mtime":1543376220537},{"path":"D:\\operate_system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1542166466337},{"path":"D:\\operate_system\\node_modules\\babel-loader\\lib\\index.js","mtime":1542166452696},{"path":"D:\\operate_system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1542166466337},{"path":"D:\\operate_system\\node_modules\\vue-loader\\lib\\index.js","mtime":1542166473519}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport $http from '../common/js/api';\nimport moment from 'moment';\nimport { setOtherLineData } from '../common/js/myCharts';\nimport echarts from 'echarts';\nexport default {\n  data: function data() {\n    return {\n      formInline: {\n        classNames: [],\n        supId: '',\n        supServiceId: ''\n      },\n      supInfoList: [],\n      supServiceList: [],\n      pipeList: [],\n      flag: false,\n      minutesArr: [],\n      timeId: null,\n      m: 0\n    };\n  },\n  methods: {\n    services: function services() {\n      var _this = this;\n\n      var url = '/operation/upper/querySupInfoList';\n      $http(url, {}, 'get').then(function (res) {\n        _this.supInfoList = res.resData.supInfos;\n\n        if (_this.supInfoList.length) {\n          _this.formInline.supId = _this.supInfoList[0].supId;\n        }\n      });\n    },\n    querySupServiceList: function querySupServiceList() {\n      var _this2 = this;\n\n      var url = '/operation/upper/querySupServiceList';\n      $http(url, {}, 'get').then(function (res) {\n        _this2.supServiceList = res.resData.supServiceInfos;\n\n        if (_this2.supServiceList.length) {\n          _this2.formInline.supServiceId = _this2.supServiceList[0].supServiceId; // this.queryPipeList(this.formInline.supServiceId)\n        }\n      });\n    },\n    // queryPipeList (param) { // tedstetewtewt\n    //   let url = '/operation/upper/queryPipeList/' + param\n    //   $http(url, {}, 'get').then((res) => {\n    //     this.pipeList = res.resData.simplePipeInfos\n    //     if (this.pipeList.length) {\n    //       this.formInline.classNames[0] = this.pipeList[0].pipeName\n    //     }\n    //   })\n    // },\n    realTime: function realTime() {\n      var _this3 = this;\n\n      var startTime = +new Date('2018-11-20 17:25:36') - 1 * 24 * 3600 * 1000;\n      var arr = [];\n\n      for (var i = 0; i <= 1440; i++) {\n        arr.push(moment(startTime + i * 60 * 1000).format('YYYYMMDDHHmm'));\n      }\n\n      this.minutesArr = arr;\n      var url = '/qualityanalyze/supplier/realTime';\n      this.formInline.date = moment(+new Date()).format('YYYY-MM-DD HH:mm:ss');\n      $http(url, this.formInline).then(function (res) {\n        var myChart = echarts.init(_this3.$refs.charts);\n        myChart.clear();\n        var dataArr = Object.keys(res.resData.avgCallTime);\n        /* 因为返回是个对象 所以提取对象的key并组成一个数组 这是平均相应时长*/\n\n        if (dataArr && dataArr.length > 0) {\n          _this3.flag = true;\n          var data = res.resData.avgCallTime;\n          var dataCall = res.resData.callNum;\n          var xFiled = [];\n          /* x轴数据 */\n\n          var yFiled = [];\n          /* y平均响应时间y轴数据 */\n\n          var yCallFiled = [];\n          /* 平均调用量y轴数据 */\n\n          var handleObj = {};\n\n          _this3.minutesArr.forEach(function (v) {\n            if (data[v]) {\n              /* 检测某个点是否存在 则不动 反之 补一个空  这样写的好处 就是不会改变时间点的顺序 */\n              handleObj[v] = data[v];\n            } else {\n              handleObj[v] = '';\n            }\n          });\n\n          for (var k in handleObj) {\n            xFiled.push(_this3.substrTime(k));\n            /* x轴 */\n\n            yFiled.push(handleObj[k]);\n            /* y轴 */\n\n            if (dataCall[k]) {\n              yCallFiled.push(dataCall[k]);\n            } else {\n              yCallFiled.push('');\n            }\n          }\n\n          var lineData = [{\n            \"name\": \"实时响应分析(ms)\",\n            type: 'line',\n            smooth: true,\n            //是否平滑曲线显示\n            lineStyle: {\n              //线条样式 \n              normal: {\n                width: 1,\n                color: 'rgba(44,181,171, 1)'\n              }\n            },\n            areaStyle: {\n              //区域填充样式\n              normal: {\n                //线性渐变，前4个参数分别是x0,y0,x2,y2(范围0~1);相当于图形包围盒中的百分比。如果最后一个参数是‘true’，则该四个值是绝对像素位置。\n                color: 'rgba(44,181,171, 0.3)'\n              }\n            },\n            itemStyle: {\n              //折现拐点标志的样式\n              normal: {\n                color: 'rgba(44,181,171, 1)'\n              }\n            },\n            \"data\": yFiled\n          }, {\n            \"name\": \"实时调用量(条)\",\n            yAxisIndex: 1,\n            type: 'line',\n            smooth: true,\n            //是否平滑曲线显示\n            lineStyle: {\n              //线条样式 \n              normal: {\n                width: 1,\n                color: 'rgb(248,168,159)'\n              }\n            },\n            areaStyle: {\n              //区域填充样式\n              normal: {\n                //线性渐变，前4个参数分别是x0,y0,x2,y2(范围0~1);相当于图形包围盒中的百分比。如果最后一个参数是‘true’，则该四个值是绝对像素位置。\n                color: 'rgb(248,168,159,0.3)'\n              }\n            },\n            itemStyle: {\n              //折现拐点标志的样式\n              normal: {\n                color: 'rgb(248,168,159)'\n              }\n            },\n            \"data\": yCallFiled\n          }];\n          myChart.setOption(setOtherLineData(xFiled, lineData));\n\n          window.onresize = function () {\n            myChart.resize();\n          };\n        } else {\n          _this3.flag = false;\n        }\n      });\n    },\n    onSubmit: function onSubmit() {\n      this.setIntervalFun();\n    },\n    substrTime: function substrTime(params) {\n      return params.substr(params.length - 4).substr(0, 2) + ':' + params.substr(params.length - 4).substr(2, 4);\n    },\n    setIntervalFun: function setIntervalFun() {\n      if (this.timeId) {\n        clearInterval(this.timeId);\n        /* 每次调用定时器 先清除定时器 */\n      }\n\n      this.realTime();\n      /* 第一次调用 */\n\n      this.timeId = setInterval(this.playerInterVal, 1000 * 60);\n    },\n    playerInterVal: function playerInterVal() {\n      this.m++;\n\n      if (this.m > 20) {\n        /* 执行20次以后清除定时器 */\n        this.m = 0;\n        this.setIntervalFun();\n        /* 重启定时器 */\n      } else {\n        this.realTime();\n      }\n    },\n    changeValue: function changeValue(value) {// this.queryPipeList(value)\n    }\n  },\n  mounted: function mounted() {\n    this.services();\n    this.querySupServiceList();\n  }\n};",null]}